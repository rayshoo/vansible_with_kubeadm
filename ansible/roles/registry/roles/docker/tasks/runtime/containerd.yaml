---
- name: check registry config exists
  shell: |
    toml get /etc/containerd/config.toml \
    'plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry_name }}".endpoint'
  register: result
  changed_when: false
  failed_when: false

- when: result['stdout'] == ''
  block:
  - name: add registry endpoint array
    shell: |
      toml set /etc/containerd/config.toml \
      'plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry_name }}".endpoint' \
      [vansinetes]
    register: containerd_config
    changed_when: false
  - name: generate containerd config file with registry endpoint array
    copy:
      content: "{{ containerd_config['stdout'] }}"
      dest: /etc/containerd/config.toml
  - name: delete double quotes, delimeters
    replace:
      dest: /etc/containerd/config.toml
      regexp: '(endpoint\s*\=\s*)\"\[vansinetes\]\"'
      replace: '\1[""]'
      backup: yes
    notify: restart containerd
  - name: create registry config text
    shell: |
      toml set /etc/containerd/config.toml \
      'plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry_name }}".endpoint[0]' \
      http://{{ hostvars[groups['ansible_master'][0]]['ansible_host'] }}
    register: containerd_config
    changed_when: false
  - name: generate registry config file
    copy:
      content: "{{ containerd_config['stdout'] }}"
      dest: /etc/containerd/config.toml
    notify: restart containerd

- when: result['stdout'] != ''
  block:
  - set_fact:
      already_exists: false
    
  - name: check registry endpoint config exists
    when: hostvars[groups['ansible_master'][0]]['ansible_host'] in item
    set_fact:
      already_exists: true
    with_items: "{{ result['stdout_lines'] }}"
    changed_when: false

  - when: not already_exists
    block:
    - name: Add endpoint last index
      replace:
        dest: /etc/containerd/config.toml
        regexp: '(endpoint\s*\=\s*)\[(.*)\]'
        replace: '\1[\2,""]'
        backup: yes
    - name: create registry added config text
      shell: |
        toml set /etc/containerd/config.toml \
        'plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry_name }}".endpoint[{{ result['stdout_lines'] | length }}]' \
        http://{{ hostvars[groups['ansible_master'][0]]['ansible_host'] }}
      register: containerd_config
      changed_when: false
    - name: generate registry added config file
      copy:
        content: "{{ containerd_config['stdout'] }}"
        dest: /etc/containerd/config.toml
      notify: restart containerd

- when: not registry['docker']['ssl']['enable']
  block:
  - name: check allow insecure registry config exists
    shell: |
      toml get /etc/containerd/config.toml \
      'plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry_name }}".tls.insecure_skip_verify'
    register: result
    changed_when: false
    failed_when: false
  - when: result['stdout'] == '' or result['stdout'] | bool == false
    block:
    - name: create added or changed registry config text
      shell: |
        toml set /etc/containerd/config.toml \
        'plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry_name }}".tls.insecure_skip_verify' true
      register: containerd_config
      changed_when: false
    - name: generate added or changed registry config file
      copy:
        content: "{{ containerd_config['stdout'] }}"
        dest: /etc/containerd/config.toml
    - name: delete double quotes
      replace:
        dest: /etc/containerd/config.toml
        regexp: '(insecure_skip_verify\s*\=\s*)\"(.*)\"'
        replace: '\1\2'
        backup: yes
      notify: restart containerd

- when: registry['docker']['ssl']['enable']
  block:
  - name: check ca_file config exists
    shell: |
      toml get /etc/containerd/config.toml \
      'plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry_name }}".tls.ca_file'
    register: result
    changed_when: false
    failed_when: false
  - when: result['stdout'] == '' or result['stdout'] | bool == false
    block:
    - name: create added or changed ca_file config text
      shell: |
        toml set /etc/containerd/config.toml \
        'plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry_name }}".tls.ca_file' \
        {{ '/usr/share/ca-certificates/RootCA.crt' if ansible_os_family == 'Debian' else '/etc/pki/ca-trust/source/anchors/RootCA.crt' if ansible_os_family == 'RedHat' else '' }}
      register: containerd_config
      changed_when: false
    - name: generate added or changed ca_file config file
      copy:
        content: "{{ containerd_config['stdout'] }}"
        dest: /etc/containerd/config.toml
      notify: restart containerd