---
- when: registry['enable']
  block:
  - when: ansible_hostname == groups['ansible_master'][0]
    block:
    - name: Ensure registry directory exists
      become: no
      file:
        path: "{{ local['home'] }}/downloads/registry"
        state: directory
        mode: 0775

    - name: copy registry namespace.yaml file
      copy:
        src: namespace.yaml
        dest: "{{ local['home'] }}/downloads/registry/namespace.yaml"
        owner: "{{ local['user'] }}"
        group: "{{ local['user'] }}"
        mode: 0664

    - name: create registry namespace
      shell: kubectl --kubeconfig=/etc/kubernetes/admin.conf create -f {{ local['home'] }}/downloads/registry/namespace.yaml
      register: result
      failed_when: false
      changed_when: result['stderr'] is undefined or result['stderr'] | length == 0

    - name: generate registry volume.yaml file
      template:
        src: volume.j2
        dest: "{{ local['home'] }}/downloads/registry/volume.yaml"
        owner: "{{ local['user'] }}"
        group: "{{ local['user'] }}"
        mode: 0664

    - name: create registry persistent volume, claim
      shell: kubectl --kubeconfig=/etc/kubernetes/admin.conf create -f {{ local['home'] }}/downloads/registry/volume.yaml
      register: result
      failed_when: false
      changed_when: result['stderr'] is undefined or result['stderr'] | length == 0

    - name: generate registry deployment.yaml file
      template:
        src: deployment.j2
        dest: "{{ local['home'] }}/downloads/registry/deployment.yaml"
        owner: "{{ local['user'] }}"
        group: "{{ local['user'] }}"
        mode: 0644

    - name: create registry deployment
      shell: kubectl --kubeconfig=/etc/kubernetes/admin.conf create -f {{ local['home'] }}/downloads/registry/deployment.yaml
      register: result
      failed_when: false
      changed_when: result['stderr'] is undefined or result['stderr'] | length == 0

    - name: allow required registry ports to firewalld
      firewalld:
        port: 5000/tcp
        permanent: true
        immediate: yes
        state: enabled
      failed_when: false

  - set_fact:
      units:
      - { unit_name: containerd, unit_type: service, task_name: containerd }
      - { unit_name: docker, unit_type: service, task_name: docker }
      - { unit_name: crio, unit_type: service, task_name: cri-o }
      - { unit_name: podman, unit_type: socket, task_name: containers }

  - name: check service installed
    shell: systemctl list-units | grep {{ item['unit_name'] }}.{{ item['unit_type'] }}
    register: unit_result
    changed_when: false
    failed_when: false
    with_items: "{{ units }}"

  - when: unit[1]['stdout'] != ''
    include: "{{ units[unit[0]]['task_name'] }}.yaml"
    with_indexed_items: "{{ unit_result['results'] }}"
    loop_control:
      loop_var: unit

  - name: check buildah installed
    package_facts:
      manager: auto
  - when: "'buildah' in ansible_facts['packages']"
    include: containers.yaml

  - meta: flush_handlers