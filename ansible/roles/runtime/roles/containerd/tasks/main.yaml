---
- when: ansible_hostname == groups['ansible_master'][0]
  block:
  - name: Download binaries
    get_url:
      url: https://github.com/containerd/containerd/releases/download/v{{ version['containerd'] }}/containerd-{{ version['containerd'] }}-linux-amd64.tar.gz
      dest: "{{ local['home'] }}/downloads/containerd.tar"
      owner: "{{ local['user'] }}"
      group: "{{ local['user'] }}"
      mode: 0644

  - name: Unarchive containerd binaries archive
    unarchive:
      src: "{{ local['home'] }}/downloads/containerd.tar"
      dest: "{{ local['home'] }}/downloads"
      owner: "{{ local['user'] }}"
      group: "{{ local['user'] }}"
      mode: 0755

- name: Copy containerd binaries in PATH
  copy:
    src: "{{ local['home'] }}/downloads/bin/"
    dest: /usr/bin
    owner: root
    group: root
    mode: 0755

- name: Add containerd service
  copy:
    src: containerd.service
    dest: /etc/systemd/system
    owner: root
    group: root
    mode: 0644
  notify: restart containerd

- name: Ensure containerd config folder exists
  file:
    path: /etc/containerd
    state: directory
    mode: 0750

- name: check containerd config file exists
  stat:
    path: /etc/containerd/config.toml
  register: stat_result

- when: not stat_result.stat.exists
  block:
  - name: register default containerd config text
    shell: containerd config default
    register: containerd_config

  - name: generate default containerd config file
    copy:
      content: "{{ containerd_config['stdout'] }}"
      dest: /etc/containerd/config.toml
    notify: restart containerd

- name: check SystemdCgroup config
  shell: cat /etc/containerd/config.toml | yj -tji | jq -r '.plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options.SystemdCgroup'
  register: result
  changed_when: false

- when: result['stdout'] | bool != systemd_cgroup
  block:
  - name: create containerd config text with SystemdCgroup
    shell: |
      cat /etc/containerd/config.toml | yj -tji | \
      jq -r '.plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options.SystemdCgroup = {{ "true" if systemd_cgroup else "false" }}' | \
      yj -jt
    register: containerd_config

  - name: generate containerd config file with SystemdCgroup
    copy:
      content: "{{ containerd_config['stdout'] }}"
      dest: /etc/containerd/config.toml
    notify: restart containerd

- meta: flush_handlers