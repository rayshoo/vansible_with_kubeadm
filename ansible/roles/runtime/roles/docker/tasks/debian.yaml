---
- name: Install packages to install docker
  apt:
    update_cache: yes
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Add Docker APT GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg

- name: Get lsb_release
  command: lsb_release -cs
  register: lsb_release

- set_fact:
    lsb_release: "{{ lsb_release.stdout }}"

- name: Add Docker APT repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu {{ lsb_release }} stable
    state: present
    filename: docker

- name: Install docker engine latest
  when: version['docker'] == 'latest'
  apt:
    update_cache: yes
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: latest
  notify: docker service start

- when: version['docker'] != 'latest'
  block:
  - name: List the docker-ce versions available in repo
    shell: apt-cache madison docker-ce
    register: result

  - name: Get the exact docker-ce version name in apt repo
    when: version['docker'] in item
    set_fact:
      apt_docker_ce_version: "{{ item.split('|')[1] | trim }}"
    with_items: "{{ result.stdout_lines }}"

  - name: List the docker-ce-cli versions available in repo
    shell: apt-cache madison docker-ce-cli
    register: result

  - name: Get the exact docker-ce-cli version name in apt repo
    when: version['docker'] in item
    set_fact:
      apt_docker_ce_cli_version: "{{ item.split('|')[1] | trim }}"
    with_items: "{{ result.stdout_lines }}"

  - name: Install docker engine specific version
    when: item['install']
    apt:
      update_cache: yes
      force: yes
      name: "{{ item['package'] }}"
      state: present
    with_items:
      - { install: "{{ apt_docker_ce_version is defined }}", package: "docker-ce={{ apt_docker_ce_version | default(omit) }}" }
      - { install: "{{ apt_docker_ce_cli_version is defined }}", package: "docker-ce-cli={{ apt_docker_ce_cli_version | default(omit) }}" }
      - { install: true, package: containerd.io }
    notify: docker service start
    failed_when: false